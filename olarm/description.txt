Summary of MQTT Implementation
I've implemented the MQTT functionality for the Olarm Home Assistant integration, allowing for real-time updates and reduced API calls. Here's what I've added:
1. Authentication System

Created an OlarmAuth class that handles both token management and device information
Added support for logging in with email/password instead of just API key
Implemented token refresh mechanism to maintain continuous access

2. MQTT Client

Added an OlarmMqttClient class that establishes WebSocket MQTT connections to Olarm's broker
Implemented subscription to device topics for receiving real-time updates
Added methods to publish commands directly through MQTT

3. Message Handler

Created an OlarmMessageHandler class to process MQTT payloads
Implemented parsing of alarm states, zones, and other device information
Added dispatcher signals to notify entities of state changes

4. Entity Updates

Updated alarm control panel entities to respond to MQTT updates
Modified binary sensors to react to real-time zone changes
Implemented fallback to API when MQTT is unavailable

5. Configuration Flow

Updated the configuration process to accept either API key or email/password
Added clear documentation about the benefits of using email/password auth for MQTT

Key Benefits

Real-time updates: Changes to alarm state and sensors are reflected immediately
Reduced API calls: Less polling means fewer requests to the Olarm API
Faster control: Commands are sent via MQTT for quicker response
More reliable: Uses API as fallback if MQTT connection fails

Installation and Usage

Users can choose between API key (legacy) and email/password authentication
The integration automatically uses MQTT when available and falls back to API when needed
No additional configuration is needed - just provide email and password during setup

This implementation gives your Home Assistant integration similar MQTT functionality to the Homebridge plugin you provided, making it more responsive and efficient while still maintaining compatibility with existing API key setups.